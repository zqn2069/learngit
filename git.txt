$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"


创建版本库
$ mkdi learngit
$ cd learngit
$ git init


$ git add readme.txt
$ git commit -m "wrote a readme file"

查看提交历史
$ git status

$ git diff readme.txt

查看命令历史
$ git reflog

查看工作区和版本库里面最新版本的区别
$ git diff HEAD -- readme.txt

$ git log --pretty=oneline
$ git log -1

回退到上一个版本
$ git reset --hard HEAD^


场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，
分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

丢弃工作区的修改
$ git checkout -- readme.txt

把暂存区的修改撤销掉（unstage），重新放回工作区
$ git reset HEAD readme.txt


$ git rm test.txt


$ ssh-keygen -t rsa -C "youremail@example.com"


关联一个远程库
$ git remote add origin git@github.com:zqn2069/learngit.git

关联后，使用命令
$ git push -u origin master
第一次推送master分支的所有内容

此后，每次本地提交后，只要有必要，就可以使用命令
$ git push origin master
推送最新修改


$ git clone git@github.com:zqn2069/gitskills.git

$ git clone https://github.com/zqn2069/gitskills.git


查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>


$ git log --graph --pretty=oneline --abbrev-commit

--no-ff参数，表示禁用Fast forward
$ git merge --no-ff -m "merge with no-ff" dev


$ git stash

$ git stash list

Git把stash内容存在某个地方了，恢复有两个办法：
一是用

$ git stash apply恢复，但是恢复后，stash内容并不删除，你需要用

$ git stash drop 来删除；

另一种方式是用
$ git stash pop，恢复的同时把stash内容也删了


查看远程库的信息，用
$ git remote
$ git remote -v
$ git push origin master


查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。


* 标签

命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

git tag -a <tagname> -m "blablabla..."可以指定标签信息；

git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；

命令git tag可以查看所有标签。


命令git push origin <tagname>可以推送一个本地标签；

命令git push origin --tags可以推送全部未推送过的本地标签；

命令git tag -d <tagname>可以删除一个本地标签；

命令git push origin :refs/tags/<tagname>可以删除一个远程标签。



git config --global color.ui true
git config --global alias.st status
git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.br branch
git config --global alias.unstage 'reset HEAD'
git config --global alias.last 'log -1'
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
